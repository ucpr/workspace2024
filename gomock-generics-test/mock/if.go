// Code generated by MockGen. DO NOT EDIT.
// Source: if.go
//
// Generated by this command:
//
//	mockgen -source=if.go -destination=./mock/if.go
//

// Package mock_main is a generated GoMock package.
package mock_main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExampleService is a mock of ExampleService interface.
type MockExampleService[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockExampleServiceMockRecorder[T]
}

// MockExampleServiceMockRecorder is the mock recorder for MockExampleService.
type MockExampleServiceMockRecorder[T any] struct {
	mock *MockExampleService[T]
}

// NewMockExampleService creates a new mock instance.
func NewMockExampleService[T any](ctrl *gomock.Controller) *MockExampleService[T] {
	mock := &MockExampleService[T]{ctrl: ctrl}
	mock.recorder = &MockExampleServiceMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExampleService[T]) EXPECT() *MockExampleServiceMockRecorder[T] {
	return m.recorder
}

// Process mocks base method.
func (m *MockExampleService[T]) Process(input T) T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", input)
	ret0, _ := ret[0].(T)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockExampleServiceMockRecorder[T]) Process(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockExampleService[T])(nil).Process), input)
}
